// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dogsitting_backend.Infrastructure;

#nullable disable

namespace dogsitting_backend.Migrations
{
    [DbContext(typeof(DogsittingDBContext))]
    partial class DogsittingDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("TeamUsers", b =>
                {
                    b.Property<Guid>("userId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("teamId")
                        .HasColumnType("char(36)");

                    b.HasKey("userId", "teamId");

                    b.HasIndex("teamId");

                    b.ToTable("TeamUsers", (string)null);
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.Property<Guid>("userId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("roleId")
                        .HasColumnType("char(36)");

                    b.HasKey("userId", "roleId");

                    b.HasIndex("roleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("dogsitting_backend.Domain.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("MediaId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<double>("WeightKg")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("UserId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("dogsitting_backend.Domain.Availability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsAllday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LodgerCount")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.auth.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.auth.UserLogin", b =>
                {
                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("ProviderKey", "LoginProvider");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.auth.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.calendar.Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("MaxWeekDaysLodgerCount")
                        .HasColumnType("int");

                    b.Property<int>("MaxWeekendDaysLodgerCount")
                        .HasColumnType("int");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("UseAvailabilities")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseUnavailabilities")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.ToTable("Calendars", (string)null);
                });

            modelBuilder.Entity("dogsitting_backend.Domain.media.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("medias");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.media.ReservationMedia", b =>
                {
                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("char(36)");

                    b.HasKey("ReservationId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("ReservationMedia");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.media.TeamMedia", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("TeamId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("TeamMedia");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.media.UserMedia", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("UserMedia");
                });

            modelBuilder.Entity("TeamUsers", b =>
                {
                    b.HasOne("dogsitting_backend.Domain.Team", null)
                        .WithMany()
                        .HasForeignKey("teamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dogsitting_backend.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.HasOne("dogsitting_backend.Domain.auth.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dogsitting_backend.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dogsitting_backend.Domain.Animal", b =>
                {
                    b.HasOne("dogsitting_backend.Domain.media.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId");

                    b.HasOne("dogsitting_backend.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.Availability", b =>
                {
                    b.HasOne("dogsitting_backend.Domain.calendar.Calendar", "Calendar")
                        .WithMany("Availabilities")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.Reservation", b =>
                {
                    b.HasOne("dogsitting_backend.Domain.calendar.Calendar", "Calendar")
                        .WithMany("Reservations")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dogsitting_backend.Domain.ApplicationUser", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.auth.UserLogin", b =>
                {
                    b.HasOne("dogsitting_backend.Domain.ApplicationUser", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.calendar.Calendar", b =>
                {
                    b.HasOne("dogsitting_backend.Domain.Team", "Team")
                        .WithOne("Calendar")
                        .HasForeignKey("dogsitting_backend.Domain.calendar.Calendar", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.media.ReservationMedia", b =>
                {
                    b.HasOne("dogsitting_backend.Domain.media.Media", "Media")
                        .WithMany("ReservationMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dogsitting_backend.Domain.Reservation", "Reservation")
                        .WithMany("ReservationMedias")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.media.TeamMedia", b =>
                {
                    b.HasOne("dogsitting_backend.Domain.media.Media", "Media")
                        .WithMany("TeamMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dogsitting_backend.Domain.Team", "Team")
                        .WithMany("TeamMedias")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.media.UserMedia", b =>
                {
                    b.HasOne("dogsitting_backend.Domain.media.Media", "Media")
                        .WithMany("UserMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dogsitting_backend.Domain.ApplicationUser", "User")
                        .WithMany("UserMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.ApplicationUser", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("UserLogins");

                    b.Navigation("UserMedias");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.Reservation", b =>
                {
                    b.Navigation("ReservationMedias");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.Team", b =>
                {
                    b.Navigation("Calendar")
                        .IsRequired();

                    b.Navigation("TeamMedias");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.calendar.Calendar", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("dogsitting_backend.Domain.media.Media", b =>
                {
                    b.Navigation("ReservationMedias");

                    b.Navigation("TeamMedias");

                    b.Navigation("UserMedias");
                });
#pragma warning restore 612, 618
        }
    }
}
